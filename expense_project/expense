#! /usr/bin/env ruby

require 'pg'

require "io/console"

class ExpenseData
  def initialize
    @connection = PG.connect(dbname: "expense")
    setup_schema
  end

  def setup_schema
    result = @connection.exec <<~SQL
      SELECT COUNT(*) FROM information_schema.tables
      WHERE table_schema = 'public' AND table_name = 'expenses';
    SQL

    if result[0]["count"] == "0"
      @connection.exec <<~SQL
        CREATE TABLE expenses (
          id serial PRIMARY KEY,
          amount numeric(6,2) NOT NULL CHECK (amount >= 0.01),
          memo text NOT NULL,
          created_on date NOT NULL
        );
      SQL
    end
  end

  def add_expense(amount, memo)
    date = Date.today
    sql = "INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3);"
    @connection.exec_params(sql, [amount, memo, date])
  end

  def search_expenses(keyword)
    sql = "SELECT * FROM expenses WHERE memo ILIKE $1;"
    result = @connection.exec_params(sql, ["%#{keyword}%"])
    display_count(result)
    display_expenses(result) if result.values.size > 0
  end

  def delete_expense(id)
    sql = "SELECT * FROM expenses WHERE id = $1;"
    row_to_delete = @connection.exec_params(sql, [id])

    if row_to_delete.ntuples == 1
      sql = "DELETE FROM expenses WHERE id = $1;"
      @connection.exec_params(sql, [id])

      puts "The following expense has been deleted:"
      display_expenses(row_to_delete)
    else
      "There is no matching expense with id '#{id}'."
    end
  end

  def clear_expenses
    @connection.exec("DELETE FROM expenses;")
    puts "All expenses have been deleted."
  end

  def list_expenses
    result = @connection.exec("SELECT * FROM expenses ORDER BY created_on;")
    display_count(result)
    display_expenses(result) if result.values.size > 0
  end

  def display_count(result)
    if result.values.empty?
      puts "There are no expenses."
    elsif result.values.size == 1
      puts "There is 1 expense."
    else
      puts "There are #{result.values.size} expenses."
    end
  end

  def display_expenses(expenses)
    expenses.each do |tuple|
      columns = [ tuple["id"].rjust(3),
                  tuple["created_on"].rjust(10),
                  tuple["amount"].rjust(12),
                  tuple["memo"] ]

      puts columns.join(" | ")
    end

    puts "-" * 50

    amount_sum = expenses.field_values("amount").map(&:to_f).inject(:+)

    puts "Total #{amount_sum.to_s.rjust(25)}"
  end
end

class CLI
  def initialize
    @application = ExpenseData.new
  end

  def run(args)
    command = args.shift
    case command
    when "add"
      amount = args[0]
      memo = args[1]
      abort "You must provide an amount and memo." unless amount && memo
      @application.add_expense(amount, memo)
    when "list"
      @application.list_expenses
    when "search"
      @application.search_expenses(args[0])
    when "delete"
      @application.delete_expense(args[0])
    when "clear"
      puts "This will remove all expenses. Are you sure? (y/n)"
      response = $stdin.getch
      @application.clear_expenses if response == "y"
    else
      display_help
    end
  end

  def display_help
    commands = ["add AMOUNT MEMO [DATE] - record a new expense",
    "clear - delete all expenses",
    "list - list all expenses",
    "delete NUMBER - remove expense with id NUMBER",
    "search QUERY - list expenses with a matching memo field"]

    puts commands
  end
end

CLI.new.run(ARGV)
